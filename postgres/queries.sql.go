// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addVersionMapping = `-- name: AddVersionMapping :exec
INSERT INTO version_mapping(id, source_version, target_version, created)
VALUES ($1, $2, $3, $4)
ON CONFLICT (id, source_version) DO UPDATE
   SET target_version = excluded.target_version,
       created = excluded.created
`

type AddVersionMappingParams struct {
	ID            uuid.UUID
	SourceVersion int64
	TargetVersion int64
	Created       pgtype.Timestamptz
}

func (q *Queries) AddVersionMapping(ctx context.Context, arg AddVersionMappingParams) error {
	_, err := q.db.Exec(ctx, addVersionMapping,
		arg.ID,
		arg.SourceVersion,
		arg.TargetVersion,
		arg.Created,
	)
	return err
}

const getDocumentVersion = `-- name: GetDocumentVersion :one
SELECT target_version FROM document
WHERE id = $1
`

func (q *Queries) GetDocumentVersion(ctx context.Context, id uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getDocumentVersion, id)
	var target_version int64
	err := row.Scan(&target_version)
	return target_version, err
}

const getState = `-- name: GetState :one
SELECT value FROM state
WHERE name = $1
`

func (q *Queries) GetState(ctx context.Context, name string) ([]byte, error) {
	row := q.db.QueryRow(ctx, getState, name)
	var value []byte
	err := row.Scan(&value)
	return value, err
}

const getTargetVersion = `-- name: GetTargetVersion :one
SELECT target_version
FROM version_mapping
WHERE id = $1 AND source_version = $2
`

type GetTargetVersionParams struct {
	ID            uuid.UUID
	SourceVersion int64
}

func (q *Queries) GetTargetVersion(ctx context.Context, arg GetTargetVersionParams) (int64, error) {
	row := q.db.QueryRow(ctx, getTargetVersion, arg.ID, arg.SourceVersion)
	var target_version int64
	err := row.Scan(&target_version)
	return target_version, err
}

const removeDocument = `-- name: RemoveDocument :exec
DELETE FROM document WHERE id = $1
`

func (q *Queries) RemoveDocument(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeDocument, id)
	return err
}

const removeDocumentVersionMappings = `-- name: RemoveDocumentVersionMappings :exec
DELETE FROM version_mapping
WHERE id = $1
`

func (q *Queries) RemoveDocumentVersionMappings(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, removeDocumentVersionMappings, id)
	return err
}

const removeOldMappings = `-- name: RemoveOldMappings :exec
DELETE FROM version_mapping
WHERE created < $1
`

func (q *Queries) RemoveOldMappings(ctx context.Context, cutoff pgtype.Timestamptz) error {
	_, err := q.db.Exec(ctx, removeOldMappings, cutoff)
	return err
}

const setDocumentVersion = `-- name: SetDocumentVersion :exec
INSERT INTO document(id, target_version)
VALUES($1, $2)
ON CONFLICT (id) DO UPDATE
   SET target_version = excluded.target_version
`

type SetDocumentVersionParams struct {
	ID            uuid.UUID
	TargetVersion int64
}

func (q *Queries) SetDocumentVersion(ctx context.Context, arg SetDocumentVersionParams) error {
	_, err := q.db.Exec(ctx, setDocumentVersion, arg.ID, arg.TargetVersion)
	return err
}

const setState = `-- name: SetState :exec
INSERT INTO state(name, value)
       VALUES ($1, $2)
ON CONFLICT (name)
   DO UPDATE SET value = $2
`

type SetStateParams struct {
	Name  string
	Value []byte
}

func (q *Queries) SetState(ctx context.Context, arg SetStateParams) error {
	_, err := q.db.Exec(ctx, setState, arg.Name, arg.Value)
	return err
}
